{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "184546ff",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-10-26T19:27:49.560079Z",
     "iopub.status.busy": "2025-10-26T19:27:49.559261Z",
     "iopub.status.idle": "2025-10-26T19:27:51.934754Z",
     "shell.execute_reply": "2025-10-26T19:27:51.933313Z"
    },
    "papermill": {
     "duration": 2.383253,
     "end_time": "2025-10-26T19:27:51.936535",
     "exception": false,
     "start_time": "2025-10-26T19:27:49.553282",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/playground-series-s5e10/sample_submission.csv\n",
      "/kaggle/input/playground-series-s5e10/train.csv\n",
      "/kaggle/input/playground-series-s5e10/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b66bd00e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-26T19:27:51.945825Z",
     "iopub.status.busy": "2025-10-26T19:27:51.945429Z",
     "iopub.status.idle": "2025-10-26T19:28:02.287032Z",
     "shell.execute_reply": "2025-10-26T19:28:02.285923Z"
    },
    "papermill": {
     "duration": 10.348098,
     "end_time": "2025-10-26T19:28:02.288802",
     "exception": false,
     "start_time": "2025-10-26T19:27:51.940704",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.metrics import mean_squared_error\n",
    "import xgboost as xgb\n",
    "import lightgbm as lgb"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a44b957",
   "metadata": {
    "papermill": {
     "duration": 0.003511,
     "end_time": "2025-10-26T19:28:02.296430",
     "exception": false,
     "start_time": "2025-10-26T19:28:02.292919",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Load Dataset**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3cadac4d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-26T19:28:02.305322Z",
     "iopub.status.busy": "2025-10-26T19:28:02.304706Z",
     "iopub.status.idle": "2025-10-26T19:28:04.271425Z",
     "shell.execute_reply": "2025-10-26T19:28:04.270488Z"
    },
    "papermill": {
     "duration": 1.973204,
     "end_time": "2025-10-26T19:28:04.273237",
     "exception": false,
     "start_time": "2025-10-26T19:28:02.300033",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train = pd.read_csv('/kaggle/input/playground-series-s5e10/train.csv')\n",
    "test = pd.read_csv('/kaggle/input/playground-series-s5e10/test.csv')\n",
    "submission = pd.read_csv('/kaggle/input/playground-series-s5e10/sample_submission.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fcc829bf",
   "metadata": {
    "papermill": {
     "duration": 0.003485,
     "end_time": "2025-10-26T19:28:04.280984",
     "exception": false,
     "start_time": "2025-10-26T19:28:04.277499",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Basic feature engineering**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "94524fed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-26T19:28:04.290330Z",
     "iopub.status.busy": "2025-10-26T19:28:04.290040Z",
     "iopub.status.idle": "2025-10-26T19:28:04.324833Z",
     "shell.execute_reply": "2025-10-26T19:28:04.323944Z"
    },
    "papermill": {
     "duration": 0.041022,
     "end_time": "2025-10-26T19:28:04.326563",
     "exception": false,
     "start_time": "2025-10-26T19:28:04.285541",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train['curv_speed'] = train['curvature'] * train['speed_limit']\n",
    "test['curv_speed'] = test['curvature'] * test['speed_limit']\n",
    "train['lane_speed'] = train['num_lanes'] * train['speed_limit']\n",
    "test['lane_speed'] = test['num_lanes'] * test['speed_limit']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fbcc4a7a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-26T19:28:04.335889Z",
     "iopub.status.busy": "2025-10-26T19:28:04.335075Z",
     "iopub.status.idle": "2025-10-26T19:28:04.364981Z",
     "shell.execute_reply": "2025-10-26T19:28:04.363934Z"
    },
    "papermill": {
     "duration": 0.036449,
     "end_time": "2025-10-26T19:28:04.366835",
     "exception": false,
     "start_time": "2025-10-26T19:28:04.330386",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "for col in ['curvature', 'num_reported_accidents']:\n",
    "    train[col + '_log'] = np.log1p(train[col])\n",
    "    test[col + '_log'] = np.log1p(test[col])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc2fe24c",
   "metadata": {
    "papermill": {
     "duration": 0.004736,
     "end_time": "2025-10-26T19:28:04.376240",
     "exception": false,
     "start_time": "2025-10-26T19:28:04.371504",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Target encoding for categoricals**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ba95e66b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-26T19:28:04.386214Z",
     "iopub.status.busy": "2025-10-26T19:28:04.385871Z",
     "iopub.status.idle": "2025-10-26T19:28:04.773039Z",
     "shell.execute_reply": "2025-10-26T19:28:04.771953Z"
    },
    "papermill": {
     "duration": 0.393736,
     "end_time": "2025-10-26T19:28:04.774915",
     "exception": false,
     "start_time": "2025-10-26T19:28:04.381179",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def target_encode(train_df, test_df, col, target='accident_risk'):\n",
    "    means = train_df.groupby(col)[target].mean()\n",
    "    train_df[col + '_te'] = train_df[col].map(means)\n",
    "    test_df[col + '_te'] = test_df[col].map(means).fillna(train_df[target].mean())\n",
    "    return train_df, test_df\n",
    "\n",
    "for cat in ['road_type', 'weather', 'lighting', 'time_of_day']:\n",
    "    train, test = target_encode(train, test, cat)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "48cc2697",
   "metadata": {
    "papermill": {
     "duration": 0.003651,
     "end_time": "2025-10-26T19:28:04.786727",
     "exception": false,
     "start_time": "2025-10-26T19:28:04.783076",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Final feature set (remove original categorical columns and id/target)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "e86c9ea1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-26T19:28:04.796236Z",
     "iopub.status.busy": "2025-10-26T19:28:04.795883Z",
     "iopub.status.idle": "2025-10-26T19:28:04.871796Z",
     "shell.execute_reply": "2025-10-26T19:28:04.870761Z"
    },
    "papermill": {
     "duration": 0.082765,
     "end_time": "2025-10-26T19:28:04.873657",
     "exception": false,
     "start_time": "2025-10-26T19:28:04.790892",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "drop_cols = ['id', 'accident_risk', 'road_type', 'weather', 'lighting', 'time_of_day']\n",
    "X = train.drop(columns=drop_cols)\n",
    "y = train['accident_risk']\n",
    "X_test = test[X.columns]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8ced10a7",
   "metadata": {
    "papermill": {
     "duration": 0.003422,
     "end_time": "2025-10-26T19:28:04.880826",
     "exception": false,
     "start_time": "2025-10-26T19:28:04.877404",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**KFold setup**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "adee0d53",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-26T19:28:04.889543Z",
     "iopub.status.busy": "2025-10-26T19:28:04.889187Z",
     "iopub.status.idle": "2025-10-26T19:28:04.895147Z",
     "shell.execute_reply": "2025-10-26T19:28:04.894311Z"
    },
    "papermill": {
     "duration": 0.012197,
     "end_time": "2025-10-26T19:28:04.896731",
     "exception": false,
     "start_time": "2025-10-26T19:28:04.884534",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "n_splits = 5\n",
    "kf = KFold(n_splits=n_splits, shuffle=True, random_state=42)\n",
    "xgb_oof, xgb_preds = np.zeros(len(X)), np.zeros(len(X_test))\n",
    "lgb_oof, lgb_preds = np.zeros(len(X)), np.zeros(len(X_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "d6eedecc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-26T19:28:04.905232Z",
     "iopub.status.busy": "2025-10-26T19:28:04.904918Z",
     "iopub.status.idle": "2025-10-26T19:28:04.909797Z",
     "shell.execute_reply": "2025-10-26T19:28:04.908793Z"
    },
    "papermill": {
     "duration": 0.010959,
     "end_time": "2025-10-26T19:28:04.911469",
     "exception": false,
     "start_time": "2025-10-26T19:28:04.900510",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# XGBoost parameters\n",
    "xgb_params = {\n",
    "    'objective': 'reg:squarederror',\n",
    "    'eval_metric': 'rmse',\n",
    "    'n_estimators': 5000,\n",
    "    'learning_rate': 0.01,\n",
    "    'max_depth': 8,\n",
    "    'subsample': 0.8,\n",
    "    'colsample_bytree': 0.8,\n",
    "    'min_child_weight': 5,\n",
    "    'random_state': 42,\n",
    "    'tree_method': 'hist'\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "064634e8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-26T19:28:04.920214Z",
     "iopub.status.busy": "2025-10-26T19:28:04.919812Z",
     "iopub.status.idle": "2025-10-26T19:28:04.925472Z",
     "shell.execute_reply": "2025-10-26T19:28:04.924264Z"
    },
    "papermill": {
     "duration": 0.012029,
     "end_time": "2025-10-26T19:28:04.927164",
     "exception": false,
     "start_time": "2025-10-26T19:28:04.915135",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# LightGBM parameters\n",
    "lgb_params = {\n",
    "    'objective': 'regression',\n",
    "    'metric': 'rmse',\n",
    "    'n_estimators': 5000,\n",
    "    'learning_rate': 0.01,\n",
    "    'max_depth': 8,\n",
    "    'subsample': 0.8,\n",
    "    'colsample_bytree': 0.8,\n",
    "    'reg_lambda': 2.0,\n",
    "    'reg_alpha': 1.0,\n",
    "    'random_state': 42,\n",
    "    'verbose': -1\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "68a54977",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-26T19:28:04.935971Z",
     "iopub.status.busy": "2025-10-26T19:28:04.935653Z",
     "iopub.status.idle": "2025-10-26T19:46:51.352385Z",
     "shell.execute_reply": "2025-10-26T19:46:51.351480Z"
    },
    "papermill": {
     "duration": 1126.423383,
     "end_time": "2025-10-26T19:46:51.354489",
     "exception": false,
     "start_time": "2025-10-26T19:28:04.931106",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fold 1\n",
      "Training until validation scores don't improve for 200 rounds\n",
      "Did not meet early stopping. Best iteration is:\n",
      "[4986]\tvalid_0's rmse: 0.0562436\n",
      "Fold 2\n",
      "Training until validation scores don't improve for 200 rounds\n",
      "Did not meet early stopping. Best iteration is:\n",
      "[4992]\tvalid_0's rmse: 0.0561203\n",
      "Fold 3\n",
      "Training until validation scores don't improve for 200 rounds\n",
      "Did not meet early stopping. Best iteration is:\n",
      "[4974]\tvalid_0's rmse: 0.0561529\n",
      "Fold 4\n",
      "Training until validation scores don't improve for 200 rounds\n",
      "Early stopping, best iteration is:\n",
      "[4448]\tvalid_0's rmse: 0.0560225\n",
      "Fold 5\n",
      "Training until validation scores don't improve for 200 rounds\n",
      "Did not meet early stopping. Best iteration is:\n",
      "[4999]\tvalid_0's rmse: 0.0559781\n"
     ]
    }
   ],
   "source": [
    "for fold, (train_idx, val_idx) in enumerate(kf.split(X, y)):\n",
    "    print(f\"Fold {fold+1}\")\n",
    "    X_train, y_train = X.iloc[train_idx], y.iloc[train_idx]\n",
    "    X_val, y_val = X.iloc[val_idx], y.iloc[val_idx]\n",
    "\n",
    "    # XGBoost\n",
    "    xgb_model = xgb.XGBRegressor(**xgb_params, early_stopping_rounds=200)\n",
    "    xgb_model.fit(\n",
    "        X_train, y_train,\n",
    "        eval_set=[(X_val, y_val)],\n",
    "        verbose=0\n",
    "    )\n",
    "    xgb_oof[val_idx] = xgb_model.predict(X_val)\n",
    "    xgb_preds += xgb_model.predict(X_test) / n_splits\n",
    "\n",
    "    # LightGBM\n",
    "    lgb_model = lgb.LGBMRegressor(**lgb_params)\n",
    "    lgb_model.fit(\n",
    "        X_train, y_train,\n",
    "        eval_set=[(X_val, y_val)],\n",
    "        callbacks=[lgb.early_stopping(stopping_rounds=200)]\n",
    "    )\n",
    "    lgb_oof[val_idx] = lgb_model.predict(X_val)\n",
    "    lgb_preds += lgb_model.predict(X_test) / n_splits\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "315b2917",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-26T19:46:51.367800Z",
     "iopub.status.busy": "2025-10-26T19:46:51.367482Z",
     "iopub.status.idle": "2025-10-26T19:46:51.381878Z",
     "shell.execute_reply": "2025-10-26T19:46:51.380356Z"
    },
    "papermill": {
     "duration": 0.024103,
     "end_time": "2025-10-26T19:46:51.384427",
     "exception": false,
     "start_time": "2025-10-26T19:46:51.360324",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "XGBoost CV RMSE: 0.05601735838619719\n",
      "LightGBM CV RMSE: 0.05610358890319295\n"
     ]
    }
   ],
   "source": [
    "print(\"XGBoost CV RMSE:\", np.sqrt(mean_squared_error(y, xgb_oof)))\n",
    "print(\"LightGBM CV RMSE:\", np.sqrt(mean_squared_error(y, lgb_oof)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "b4904f7c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-26T19:46:51.398106Z",
     "iopub.status.busy": "2025-10-26T19:46:51.397465Z",
     "iopub.status.idle": "2025-10-26T19:46:51.819123Z",
     "shell.execute_reply": "2025-10-26T19:46:51.817940Z"
    },
    "papermill": {
     "duration": 0.430267,
     "end_time": "2025-10-26T19:46:51.820918",
     "exception": false,
     "start_time": "2025-10-26T19:46:51.390651",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       id  accident_risk\n",
      "0  517754       0.295466\n",
      "1  517755       0.123538\n",
      "2  517756       0.184731\n",
      "3  517757       0.315514\n",
      "4  517758       0.397310\n"
     ]
    }
   ],
   "source": [
    "blended_preds = (xgb_preds + lgb_preds) / 2\n",
    "submission['accident_risk'] = np.clip(blended_preds, 0, 1)\n",
    "submission.to_csv('submission.csv', index=False)\n",
    "print(submission.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "eb05af9e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-26T19:46:51.831430Z",
     "iopub.status.busy": "2025-10-26T19:46:51.831066Z",
     "iopub.status.idle": "2025-10-26T19:46:51.835170Z",
     "shell.execute_reply": "2025-10-26T19:46:51.834269Z"
    },
    "papermill": {
     "duration": 0.011147,
     "end_time": "2025-10-26T19:46:51.836798",
     "exception": false,
     "start_time": "2025-10-26T19:46:51.825651",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#For raw XGBoost or LightGBM submission:\n",
    "#submission['accident_risk'] = np.clip(xgb_preds, 0, 1)  # or lgb_preds\n",
    "#submission.to_csv('submission_xgb.csv', index=False)\n",
    "#submission.to_csv('submission_lgb.csv', index=False)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 13760552,
     "isSourceIdPinned": false,
     "sourceId": 91721,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31153,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1149.387293,
   "end_time": "2025-10-26T19:46:53.065327",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-10-26T19:27:43.678034",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
