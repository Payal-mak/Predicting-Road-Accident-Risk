{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "79bf03a3",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-10-27T05:56:26.525971Z",
     "iopub.status.busy": "2025-10-27T05:56:26.525650Z",
     "iopub.status.idle": "2025-10-27T05:56:28.405813Z",
     "shell.execute_reply": "2025-10-27T05:56:28.404579Z"
    },
    "papermill": {
     "duration": 1.888998,
     "end_time": "2025-10-27T05:56:28.407731",
     "exception": false,
     "start_time": "2025-10-27T05:56:26.518733",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/playground-series-s5e10/sample_submission.csv\n",
      "/kaggle/input/playground-series-s5e10/train.csv\n",
      "/kaggle/input/playground-series-s5e10/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "a4eb13d9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T05:56:28.418589Z",
     "iopub.status.busy": "2025-10-27T05:56:28.418144Z",
     "iopub.status.idle": "2025-10-27T05:56:37.526880Z",
     "shell.execute_reply": "2025-10-27T05:56:37.525666Z"
    },
    "papermill": {
     "duration": 9.116271,
     "end_time": "2025-10-27T05:56:37.528776",
     "exception": false,
     "start_time": "2025-10-27T05:56:28.412505",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.linear_model import RidgeCV\n",
    "import xgboost as xgb\n",
    "import lightgbm as lgb\n",
    "from catboost import CatBoostRegressor, Pool"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3f92c4cb",
   "metadata": {
    "papermill": {
     "duration": 0.00363,
     "end_time": "2025-10-27T05:56:37.536636",
     "exception": false,
     "start_time": "2025-10-27T05:56:37.533006",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Load Dataset**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8ba86673",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T05:56:37.546194Z",
     "iopub.status.busy": "2025-10-27T05:56:37.545412Z",
     "iopub.status.idle": "2025-10-27T05:56:39.272875Z",
     "shell.execute_reply": "2025-10-27T05:56:39.271521Z"
    },
    "papermill": {
     "duration": 1.734501,
     "end_time": "2025-10-27T05:56:39.274927",
     "exception": false,
     "start_time": "2025-10-27T05:56:37.540426",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train = pd.read_csv('/kaggle/input/playground-series-s5e10/train.csv')\n",
    "test = pd.read_csv('/kaggle/input/playground-series-s5e10/test.csv')\n",
    "submission = pd.read_csv('/kaggle/input/playground-series-s5e10/sample_submission.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d40c61f4",
   "metadata": {
    "papermill": {
     "duration": 0.004098,
     "end_time": "2025-10-27T05:56:39.283598",
     "exception": false,
     "start_time": "2025-10-27T05:56:39.279500",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Basic feature engineering**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8d054577",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T05:56:39.293574Z",
     "iopub.status.busy": "2025-10-27T05:56:39.293123Z",
     "iopub.status.idle": "2025-10-27T05:56:39.366903Z",
     "shell.execute_reply": "2025-10-27T05:56:39.365715Z"
    },
    "papermill": {
     "duration": 0.081113,
     "end_time": "2025-10-27T05:56:39.368930",
     "exception": false,
     "start_time": "2025-10-27T05:56:39.287817",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train['curv_speed'] = train['curvature'] * train['speed_limit']\n",
    "test['curv_speed'] = test['curvature'] * test['speed_limit']\n",
    "train['lane_speed'] = train['num_lanes'] * train['speed_limit']\n",
    "test['lane_speed'] = test['num_lanes'] * test['speed_limit']\n",
    "for col in ['curvature', 'num_reported_accidents']:\n",
    "    train[col + '_log'] = np.log1p(train[col])\n",
    "    test[col + '_log'] = np.log1p(test[col])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25d8ff4f",
   "metadata": {
    "papermill": {
     "duration": 0.004527,
     "end_time": "2025-10-27T05:56:39.378749",
     "exception": false,
     "start_time": "2025-10-27T05:56:39.374222",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Target encoding for categoricals**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "671aba7a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T05:56:39.387849Z",
     "iopub.status.busy": "2025-10-27T05:56:39.387545Z",
     "iopub.status.idle": "2025-10-27T05:56:39.740732Z",
     "shell.execute_reply": "2025-10-27T05:56:39.739796Z"
    },
    "papermill": {
     "duration": 0.359858,
     "end_time": "2025-10-27T05:56:39.742654",
     "exception": false,
     "start_time": "2025-10-27T05:56:39.382796",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def target_encode(train_df, test_df, col, target='accident_risk'):\n",
    "    means = train_df.groupby(col)[target].mean()\n",
    "    train_df[col + '_te'] = train_df[col].map(means)\n",
    "    test_df[col + '_te'] = test_df[col].map(means).fillna(train_df[target].mean())\n",
    "    return train_df, test_df\n",
    "\n",
    "for cat in ['road_type', 'weather', 'lighting', 'time_of_day']:\n",
    "    train, test = target_encode(train, test, cat)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "960c372d",
   "metadata": {
    "papermill": {
     "duration": 0.003513,
     "end_time": "2025-10-27T05:56:39.750065",
     "exception": false,
     "start_time": "2025-10-27T05:56:39.746552",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Final feature set (remove original categorical columns and id/target)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6746afe1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T05:56:39.758719Z",
     "iopub.status.busy": "2025-10-27T05:56:39.758407Z",
     "iopub.status.idle": "2025-10-27T05:56:39.834118Z",
     "shell.execute_reply": "2025-10-27T05:56:39.833121Z"
    },
    "papermill": {
     "duration": 0.08237,
     "end_time": "2025-10-27T05:56:39.836199",
     "exception": false,
     "start_time": "2025-10-27T05:56:39.753829",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "drop_cols = ['id', 'accident_risk', 'road_type', 'weather', 'lighting', 'time_of_day']\n",
    "X = train.drop(columns=drop_cols)\n",
    "y = train['accident_risk']\n",
    "X_test = test[X.columns]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60a5c5c3",
   "metadata": {
    "papermill": {
     "duration": 0.003984,
     "end_time": "2025-10-27T05:56:39.844532",
     "exception": false,
     "start_time": "2025-10-27T05:56:39.840548",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**KFold setup**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "db4fc512",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T05:56:39.854259Z",
     "iopub.status.busy": "2025-10-27T05:56:39.853896Z",
     "iopub.status.idle": "2025-10-27T05:56:39.858896Z",
     "shell.execute_reply": "2025-10-27T05:56:39.857732Z"
    },
    "papermill": {
     "duration": 0.012468,
     "end_time": "2025-10-27T05:56:39.861169",
     "exception": false,
     "start_time": "2025-10-27T05:56:39.848701",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "n_splits = 5\n",
    "kf = KFold(n_splits=n_splits, shuffle=True, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "b60a91aa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T05:56:39.872759Z",
     "iopub.status.busy": "2025-10-27T05:56:39.872424Z",
     "iopub.status.idle": "2025-10-27T05:56:39.877810Z",
     "shell.execute_reply": "2025-10-27T05:56:39.876828Z"
    },
    "papermill": {
     "duration": 0.013335,
     "end_time": "2025-10-27T05:56:39.879675",
     "exception": false,
     "start_time": "2025-10-27T05:56:39.866340",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# XGBoost parameters\n",
    "xgb_params = {\n",
    "    'objective': 'reg:squarederror',\n",
    "    'eval_metric': 'rmse',\n",
    "    'n_estimators': 3000,\n",
    "    'learning_rate': 0.01,\n",
    "    'max_depth': 7,\n",
    "    'subsample': 0.77,\n",
    "    'colsample_bytree': 0.78,\n",
    "    'min_child_weight': 5,\n",
    "    'random_state': 42,\n",
    "    'tree_method': 'hist',\n",
    "    'enable_categorical': True,\n",
    "    'early_stopping_rounds': 200\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0225878b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T05:56:39.890067Z",
     "iopub.status.busy": "2025-10-27T05:56:39.889753Z",
     "iopub.status.idle": "2025-10-27T05:56:39.895712Z",
     "shell.execute_reply": "2025-10-27T05:56:39.894501Z"
    },
    "papermill": {
     "duration": 0.013157,
     "end_time": "2025-10-27T05:56:39.897430",
     "exception": false,
     "start_time": "2025-10-27T05:56:39.884273",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# LightGBM parameters\n",
    "lgb_params = {\n",
    "    'objective': 'regression',\n",
    "    'metric': 'rmse',\n",
    "    'n_estimators': 3000,\n",
    "    'learning_rate': 0.015,\n",
    "    'max_depth': 7,\n",
    "    'subsample': 0.8,\n",
    "    'colsample_bytree': 0.8,\n",
    "    'reg_lambda': 2.0,\n",
    "    'reg_alpha': 1.0,\n",
    "    'random_state': 42,\n",
    "    'verbose': -1\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "a9d5fed8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T05:56:39.907489Z",
     "iopub.status.busy": "2025-10-27T05:56:39.907086Z",
     "iopub.status.idle": "2025-10-27T05:56:39.912978Z",
     "shell.execute_reply": "2025-10-27T05:56:39.911917Z"
    },
    "papermill": {
     "duration": 0.013165,
     "end_time": "2025-10-27T05:56:39.914777",
     "exception": false,
     "start_time": "2025-10-27T05:56:39.901612",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "cat_params = {\n",
    "    'loss_function': 'RMSE',\n",
    "    'iterations': 2000,\n",
    "    'learning_rate': 0.019,\n",
    "    'depth': 7,\n",
    "    'random_seed': 42,\n",
    "    'verbose': False\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "925af08b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T05:56:39.924502Z",
     "iopub.status.busy": "2025-10-27T05:56:39.923693Z",
     "iopub.status.idle": "2025-10-27T05:56:39.931188Z",
     "shell.execute_reply": "2025-10-27T05:56:39.930084Z"
    },
    "papermill": {
     "duration": 0.014166,
     "end_time": "2025-10-27T05:56:39.932852",
     "exception": false,
     "start_time": "2025-10-27T05:56:39.918686",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Out-of-fold and prediction arrays\n",
    "xgb_oof, xgb_preds = np.zeros(len(X)), np.zeros(len(X_test))\n",
    "lgb_oof, lgb_preds = np.zeros(len(X)), np.zeros(len(X_test))\n",
    "cat_oof, cat_preds = np.zeros(len(X)), np.zeros(len(X_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "e1fd911f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T05:56:39.942026Z",
     "iopub.status.busy": "2025-10-27T05:56:39.941656Z",
     "iopub.status.idle": "2025-10-27T06:20:04.859993Z",
     "shell.execute_reply": "2025-10-27T06:20:04.858598Z"
    },
    "papermill": {
     "duration": 1404.925513,
     "end_time": "2025-10-27T06:20:04.862299",
     "exception": false,
     "start_time": "2025-10-27T05:56:39.936786",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fold 1\n",
      "Training until validation scores don't improve for 200 rounds\n",
      "Did not meet early stopping. Best iteration is:\n",
      "[2996]\tvalid_0's rmse: 0.0562534\n",
      "Fold 2\n",
      "Training until validation scores don't improve for 200 rounds\n",
      "Did not meet early stopping. Best iteration is:\n",
      "[3000]\tvalid_0's rmse: 0.0561163\n",
      "Fold 3\n",
      "Training until validation scores don't improve for 200 rounds\n",
      "Did not meet early stopping. Best iteration is:\n",
      "[2990]\tvalid_0's rmse: 0.0561587\n",
      "Fold 4\n",
      "Training until validation scores don't improve for 200 rounds\n",
      "Did not meet early stopping. Best iteration is:\n",
      "[2986]\tvalid_0's rmse: 0.0560256\n",
      "Fold 5\n",
      "Training until validation scores don't improve for 200 rounds\n",
      "Did not meet early stopping. Best iteration is:\n",
      "[2996]\tvalid_0's rmse: 0.0559714\n"
     ]
    }
   ],
   "source": [
    "for fold, (train_idx, val_idx) in enumerate(kf.split(X, y)):\n",
    "    print(f\"Fold {fold+1}\")\n",
    "\n",
    "    # Split data\n",
    "    X_train_, X_val_ = X.iloc[train_idx], X.iloc[val_idx]\n",
    "    y_train_, y_val_ = y.iloc[train_idx], y.iloc[val_idx]\n",
    "\n",
    "    # XGBoost\n",
    "    xgb_model = xgb.XGBRegressor(**xgb_params)\n",
    "    xgb_model.fit(X_train_, y_train_,\n",
    "                  eval_set=[(X_val_, y_val_)],\n",
    "                  verbose=0)\n",
    "    xgb_oof[val_idx] = xgb_model.predict(X_val_)\n",
    "    xgb_preds += xgb_model.predict(X_test) / n_splits\n",
    "\n",
    "    # LightGBM\n",
    "    lgb_model = lgb.LGBMRegressor(**lgb_params)\n",
    "    lgb_model.fit(X_train_, y_train_,\n",
    "                  eval_set=[(X_val_, y_val_)],\n",
    "                  callbacks=[lgb.early_stopping(stopping_rounds=200)])\n",
    "    lgb_oof[val_idx] = lgb_model.predict(X_val_)\n",
    "    lgb_preds += lgb_model.predict(X_test) / n_splits\n",
    "\n",
    "    # CatBoost\n",
    "    cat_model = CatBoostRegressor(**cat_params)\n",
    "    cat_model.fit(X_train_, y_train_,\n",
    "                  eval_set=(X_val_, y_val_),\n",
    "                  use_best_model=True)\n",
    "    cat_oof[val_idx] = cat_model.predict(X_val_)\n",
    "    cat_preds += cat_model.predict(X_test) / n_splits"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "5d1fbde9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T06:20:04.874395Z",
     "iopub.status.busy": "2025-10-27T06:20:04.873904Z",
     "iopub.status.idle": "2025-10-27T06:20:04.892926Z",
     "shell.execute_reply": "2025-10-27T06:20:04.891711Z"
    },
    "papermill": {
     "duration": 0.027236,
     "end_time": "2025-10-27T06:20:04.894871",
     "exception": false,
     "start_time": "2025-10-27T06:20:04.867635",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "XGBoost CV RMSE: 0.05602724553971516\n",
      "LightGBM CV RMSE: 0.0561051537034398\n",
      "CatBoost CV RMSE: 0.056120061841350176\n"
     ]
    }
   ],
   "source": [
    "print(\"XGBoost CV RMSE:\", np.sqrt(mean_squared_error(y, xgb_oof)))\n",
    "print(\"LightGBM CV RMSE:\", np.sqrt(mean_squared_error(y, lgb_oof)))\n",
    "print(\"CatBoost CV RMSE:\", np.sqrt(mean_squared_error(y, cat_oof)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "3ae31d84",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T06:20:04.908539Z",
     "iopub.status.busy": "2025-10-27T06:20:04.907945Z",
     "iopub.status.idle": "2025-10-27T06:20:05.753446Z",
     "shell.execute_reply": "2025-10-27T06:20:05.752188Z"
    },
    "papermill": {
     "duration": 0.855038,
     "end_time": "2025-10-27T06:20:05.756006",
     "exception": false,
     "start_time": "2025-10-27T06:20:04.900968",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Stacking (meta-model)\n",
    "meta_features_train = np.vstack([xgb_oof, lgb_oof, cat_oof]).T\n",
    "meta_features_test = np.vstack([xgb_preds, lgb_preds, cat_preds]).T\n",
    "meta_model = RidgeCV(alphas=[0.1, 1.0, 10.0], cv=5)\n",
    "meta_model.fit(meta_features_train, y)\n",
    "stacked_preds = meta_model.predict(meta_features_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "aa35ea3f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T06:20:05.768373Z",
     "iopub.status.busy": "2025-10-27T06:20:05.767992Z",
     "iopub.status.idle": "2025-10-27T06:20:05.781705Z",
     "shell.execute_reply": "2025-10-27T06:20:05.780440Z"
    },
    "papermill": {
     "duration": 0.021764,
     "end_time": "2025-10-27T06:20:05.783469",
     "exception": false,
     "start_time": "2025-10-27T06:20:05.761705",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RidgeCV Stacking RMSE (train): 0.05602454568434997\n"
     ]
    }
   ],
   "source": [
    "print(f\"RidgeCV Stacking RMSE (train): {np.sqrt(mean_squared_error(y, meta_model.predict(meta_features_train)))}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6af50c66",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T06:20:05.797573Z",
     "iopub.status.busy": "2025-10-27T06:20:05.797224Z",
     "iopub.status.idle": "2025-10-27T06:20:06.208259Z",
     "shell.execute_reply": "2025-10-27T06:20:06.207183Z"
    },
    "papermill": {
     "duration": 0.420159,
     "end_time": "2025-10-27T06:20:06.210087",
     "exception": false,
     "start_time": "2025-10-27T06:20:05.789928",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       id  accident_risk\n",
      "0  517754       0.295748\n",
      "1  517755       0.123895\n",
      "2  517756       0.183231\n",
      "3  517757       0.315425\n",
      "4  517758       0.397960\n"
     ]
    }
   ],
   "source": [
    "# Submission (stacked)\n",
    "submission['accident_risk'] = np.clip(stacked_preds, 0, 1)\n",
    "submission.to_csv('submission.csv', index=False)\n",
    "print(submission.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "fc7b9306",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-27T06:20:06.221910Z",
     "iopub.status.busy": "2025-10-27T06:20:06.221565Z",
     "iopub.status.idle": "2025-10-27T06:20:06.226532Z",
     "shell.execute_reply": "2025-10-27T06:20:06.225407Z"
    },
    "papermill": {
     "duration": 0.013111,
     "end_time": "2025-10-27T06:20:06.228460",
     "exception": false,
     "start_time": "2025-10-27T06:20:06.215349",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# submission['accident_risk'] = np.clip(0.45*xgb_preds + 0.35*lgb_preds + 0.20*cat_preds, 0, 1)\n",
    "# submission.to_csv('submission_blend.csv', index=False)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 13760552,
     "isSourceIdPinned": false,
     "sourceId": 91721,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31153,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 1426.271395,
   "end_time": "2025-10-27T06:20:07.659302",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-10-27T05:56:21.387907",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
