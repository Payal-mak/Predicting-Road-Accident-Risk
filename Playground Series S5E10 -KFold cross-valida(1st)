{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "3dfde1f7",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-10-26T18:19:16.081555Z",
     "iopub.status.busy": "2025-10-26T18:19:16.081181Z",
     "iopub.status.idle": "2025-10-26T18:19:18.402748Z",
     "shell.execute_reply": "2025-10-26T18:19:18.401570Z"
    },
    "papermill": {
     "duration": 2.329894,
     "end_time": "2025-10-26T18:19:18.404484",
     "exception": false,
     "start_time": "2025-10-26T18:19:16.074590",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/playground-series-s5e10/sample_submission.csv\n",
      "/kaggle/input/playground-series-s5e10/train.csv\n",
      "/kaggle/input/playground-series-s5e10/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8e390da7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-26T18:19:18.412936Z",
     "iopub.status.busy": "2025-10-26T18:19:18.412518Z",
     "iopub.status.idle": "2025-10-26T18:19:27.124552Z",
     "shell.execute_reply": "2025-10-26T18:19:27.123315Z"
    },
    "papermill": {
     "duration": 8.718145,
     "end_time": "2025-10-26T18:19:27.126337",
     "exception": false,
     "start_time": "2025-10-26T18:19:18.408192",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.metrics import mean_squared_error\n",
    "import lightgbm as lgb"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e279d424",
   "metadata": {
    "papermill": {
     "duration": 0.003135,
     "end_time": "2025-10-26T18:19:27.133157",
     "exception": false,
     "start_time": "2025-10-26T18:19:27.130022",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Load Dataset**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6d6bfb75",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-26T18:19:27.141389Z",
     "iopub.status.busy": "2025-10-26T18:19:27.140714Z",
     "iopub.status.idle": "2025-10-26T18:19:28.752501Z",
     "shell.execute_reply": "2025-10-26T18:19:28.751256Z"
    },
    "papermill": {
     "duration": 1.617763,
     "end_time": "2025-10-26T18:19:28.754206",
     "exception": false,
     "start_time": "2025-10-26T18:19:27.136443",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train = pd.read_csv('/kaggle/input/playground-series-s5e10/train.csv')\n",
    "test = pd.read_csv('/kaggle/input/playground-series-s5e10/test.csv')\n",
    "submission = pd.read_csv('/kaggle/input/playground-series-s5e10/sample_submission.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ace0adca",
   "metadata": {
    "papermill": {
     "duration": 0.003597,
     "end_time": "2025-10-26T18:19:28.761373",
     "exception": false,
     "start_time": "2025-10-26T18:19:28.757776",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Basic feature engineering**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1cb5f727",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-26T18:19:28.769050Z",
     "iopub.status.busy": "2025-10-26T18:19:28.768763Z",
     "iopub.status.idle": "2025-10-26T18:19:28.796723Z",
     "shell.execute_reply": "2025-10-26T18:19:28.795522Z"
    },
    "papermill": {
     "duration": 0.033936,
     "end_time": "2025-10-26T18:19:28.798669",
     "exception": false,
     "start_time": "2025-10-26T18:19:28.764733",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train['curv_speed'] = train['curvature'] * train['speed_limit']\n",
    "test['curv_speed'] = test['curvature'] * test['speed_limit']\n",
    "train['lane_speed'] = train['num_lanes'] * train['speed_limit']\n",
    "test['lane_speed'] = test['num_lanes'] * test['speed_limit']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "23c09c61",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-26T18:19:28.807491Z",
     "iopub.status.busy": "2025-10-26T18:19:28.807108Z",
     "iopub.status.idle": "2025-10-26T18:19:28.831806Z",
     "shell.execute_reply": "2025-10-26T18:19:28.830189Z"
    },
    "papermill": {
     "duration": 0.030672,
     "end_time": "2025-10-26T18:19:28.833534",
     "exception": false,
     "start_time": "2025-10-26T18:19:28.802862",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "for col in ['curvature', 'num_reported_accidents']:\n",
    "    train[col+'_log'] = np.log1p(train[col])\n",
    "    test[col+'_log'] = np.log1p(test[col])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b58244b",
   "metadata": {
    "papermill": {
     "duration": 0.003114,
     "end_time": "2025-10-26T18:19:28.840362",
     "exception": false,
     "start_time": "2025-10-26T18:19:28.837248",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Target encoding for categoricals**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "90ada395",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-26T18:19:28.848464Z",
     "iopub.status.busy": "2025-10-26T18:19:28.848043Z",
     "iopub.status.idle": "2025-10-26T18:19:29.219538Z",
     "shell.execute_reply": "2025-10-26T18:19:29.218587Z"
    },
    "papermill": {
     "duration": 0.377786,
     "end_time": "2025-10-26T18:19:29.221447",
     "exception": false,
     "start_time": "2025-10-26T18:19:28.843661",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def target_encode(train_df, test_df, col, target='accident_risk'):\n",
    "    means = train_df.groupby(col)[target].mean()\n",
    "    train_df[col+'_te'] = train_df[col].map(means)\n",
    "    test_df[col+'_te'] = test_df[col].map(means).fillna(train_df[target].mean())\n",
    "    return train_df, test_df\n",
    "\n",
    "for cat in ['road_type', 'weather', 'lighting', 'time_of_day']:\n",
    "    train, test = target_encode(train, test, cat)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38eb32ec",
   "metadata": {
    "papermill": {
     "duration": 0.003017,
     "end_time": "2025-10-26T18:19:29.227756",
     "exception": false,
     "start_time": "2025-10-26T18:19:29.224739",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "**Final feature set (remove original categorical columns and id/target)**"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "66a4b056",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-26T18:19:29.235582Z",
     "iopub.status.busy": "2025-10-26T18:19:29.235164Z",
     "iopub.status.idle": "2025-10-26T18:19:29.309625Z",
     "shell.execute_reply": "2025-10-26T18:19:29.308476Z"
    },
    "papermill": {
     "duration": 0.080558,
     "end_time": "2025-10-26T18:19:29.311475",
     "exception": false,
     "start_time": "2025-10-26T18:19:29.230917",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "drop_cols = ['id', 'accident_risk', 'road_type', 'weather', 'lighting', 'time_of_day']\n",
    "X = train.drop(columns=drop_cols)\n",
    "y = train['accident_risk']\n",
    "X_test = test[X.columns]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e98b8780",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-26T18:19:29.319843Z",
     "iopub.status.busy": "2025-10-26T18:19:29.319157Z",
     "iopub.status.idle": "2025-10-26T18:19:29.324831Z",
     "shell.execute_reply": "2025-10-26T18:19:29.323948Z"
    },
    "papermill": {
     "duration": 0.011883,
     "end_time": "2025-10-26T18:19:29.326798",
     "exception": false,
     "start_time": "2025-10-26T18:19:29.314915",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# LightGBM parameters\n",
    "params = {\n",
    "    'objective': 'regression',\n",
    "    'metric': 'rmse',\n",
    "    'n_estimators': 5000,\n",
    "    'learning_rate': 0.01,\n",
    "    'max_depth': 8,\n",
    "    'subsample': 0.8,\n",
    "    'colsample_bytree': 0.8,\n",
    "    'reg_lambda': 2.0,\n",
    "    'reg_alpha': 1.0,\n",
    "    'random_state': 42,\n",
    "    'verbose': -1\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "022a7606",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-26T18:19:29.334911Z",
     "iopub.status.busy": "2025-10-26T18:19:29.334618Z",
     "iopub.status.idle": "2025-10-26T18:19:29.339948Z",
     "shell.execute_reply": "2025-10-26T18:19:29.339170Z"
    },
    "papermill": {
     "duration": 0.011774,
     "end_time": "2025-10-26T18:19:29.341871",
     "exception": false,
     "start_time": "2025-10-26T18:19:29.330097",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "folds = 5\n",
    "kf = KFold(n_splits=folds, shuffle=True, random_state=42)\n",
    "test_preds = np.zeros(len(X_test))\n",
    "oof = np.zeros(len(X))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "ca5425c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-26T18:19:29.350312Z",
     "iopub.status.busy": "2025-10-26T18:19:29.349958Z",
     "iopub.status.idle": "2025-10-26T18:34:00.833494Z",
     "shell.execute_reply": "2025-10-26T18:34:00.832483Z"
    },
    "papermill": {
     "duration": 871.490317,
     "end_time": "2025-10-26T18:34:00.835590",
     "exception": false,
     "start_time": "2025-10-26T18:19:29.345273",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fold 1\n",
      "Training until validation scores don't improve for 200 rounds\n",
      "Did not meet early stopping. Best iteration is:\n",
      "[4986]\tvalid_0's rmse: 0.0562436\n",
      "Fold 2\n",
      "Training until validation scores don't improve for 200 rounds\n",
      "Did not meet early stopping. Best iteration is:\n",
      "[4992]\tvalid_0's rmse: 0.0561203\n",
      "Fold 3\n",
      "Training until validation scores don't improve for 200 rounds\n",
      "Did not meet early stopping. Best iteration is:\n",
      "[4974]\tvalid_0's rmse: 0.0561529\n",
      "Fold 4\n",
      "Training until validation scores don't improve for 200 rounds\n",
      "Early stopping, best iteration is:\n",
      "[4448]\tvalid_0's rmse: 0.0560225\n",
      "Fold 5\n",
      "Training until validation scores don't improve for 200 rounds\n",
      "Did not meet early stopping. Best iteration is:\n",
      "[4999]\tvalid_0's rmse: 0.0559781\n"
     ]
    }
   ],
   "source": [
    "for fold, (train_idx, val_idx) in enumerate(kf.split(X, y)):\n",
    "    print(f\"Fold {fold+1}\")\n",
    "    X_train, y_train = X.iloc[train_idx], y.iloc[train_idx]\n",
    "    X_val, y_val = X.iloc[val_idx], y.iloc[val_idx]\n",
    "    model = lgb.LGBMRegressor(**params)\n",
    "    model.fit(\n",
    "        X_train, y_train,\n",
    "        eval_set=[(X_val, y_val)],\n",
    "        callbacks=[lgb.early_stopping(stopping_rounds=200)]\n",
    "    )\n",
    "    oof[val_idx] = model.predict(X_val)\n",
    "    test_preds += model.predict(X_test) / folds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "47176ff7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-26T18:34:00.846460Z",
     "iopub.status.busy": "2025-10-26T18:34:00.846035Z",
     "iopub.status.idle": "2025-10-26T18:34:00.855327Z",
     "shell.execute_reply": "2025-10-26T18:34:00.854405Z"
    },
    "papermill": {
     "duration": 0.016173,
     "end_time": "2025-10-26T18:34:00.856864",
     "exception": false,
     "start_time": "2025-10-26T18:34:00.840691",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CV RMSE: 0.05610358890319295\n"
     ]
    }
   ],
   "source": [
    "print(\"CV RMSE:\", np.sqrt(mean_squared_error(y, oof)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "46e9499d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-10-26T18:34:00.866403Z",
     "iopub.status.busy": "2025-10-26T18:34:00.866028Z",
     "iopub.status.idle": "2025-10-26T18:34:01.284861Z",
     "shell.execute_reply": "2025-10-26T18:34:01.283396Z"
    },
    "papermill": {
     "duration": 0.426028,
     "end_time": "2025-10-26T18:34:01.287017",
     "exception": false,
     "start_time": "2025-10-26T18:34:00.860989",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "       id  accident_risk\n",
      "0  517754       0.295025\n",
      "1  517755       0.122714\n",
      "2  517756       0.186791\n",
      "3  517757       0.317089\n",
      "4  517758       0.392478\n"
     ]
    }
   ],
   "source": [
    "# Prepare submission file\n",
    "submission['accident_risk'] = np.clip(test_preds, 0, 1)\n",
    "submission.to_csv('submission.csv', index=False)\n",
    "print(submission.head())"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 13760552,
     "isSourceIdPinned": false,
     "sourceId": 91721,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31153,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 892.564768,
   "end_time": "2025-10-26T18:34:02.415555",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-10-26T18:19:09.850787",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
